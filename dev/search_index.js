var documenterSearchIndex = {"docs":
[{"location":"#KATCP.jl-Documentation","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"KATCP.jl is a Julia package for communicating via the Karoo Array Telescope Control Protocol (KATCP).  More information about KATCP can be found at the CASPER Wiki, including the KATCP specification in PDF format.","category":"page"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"","category":"page"},{"location":"#Connecting-to-a-KATCP-server","page":"KATCP.jl Documentation","title":"Connecting to a KATCP server","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"To communicate with a KATCP server you need to construct a KATCP.Client object.  You will pass this object to other functions to read/write from/to your KATCP-enabled device.","category":"page"},{"location":"#KATCP.Client","page":"KATCP.jl Documentation","title":"KATCP.Client","text":"Client(host, port::Integer=7147)\n\nConstruct a Client object for communicating with a KATCP server running on port port of host.\n\n\n\n\n\n","category":"type"},{"location":"#Example","page":"KATCP.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"client = KATCP.Client(\"katcphost\") # Use default port 7147\nclient = KATCP.Client(\"katcphost\", 7147) # Specify port explicitly","category":"page"},{"location":"#Get-list-of-devices","page":"KATCP.jl Documentation","title":"Get list of devices","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"The listdev function returns a Dict that maps device names to device sizes (in bytes).","category":"page"},{"location":"#KATCP.listdev","page":"KATCP.jl Documentation","title":"KATCP.listdev","text":"listdev(client) -> Dict{String,Int}\n\nReturn a Dict mapping device names to device byte sizes.\n\n\n\n\n\n","category":"function"},{"location":"#Example-2","page":"KATCP.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"julia> devmap = listdev(client)\nDict{String, Int64} with 51 entries:\n  \"onehundred_gbe_gmac_reg_arp_size\"             => 4\n  \"onehundred_gbe_gmac_reg_word_size\"            => 4\n  \"onehundred_gbe_gmac_reg_local_ip_netmask\"     => 4\n  \"sys\"                                          => 32\n  \"onehundred_gbe_gmac_arp_cache_read_data\"      => 4\n  \"onehundred_gbe_gmac_reg_bytes_rdy\"            => 4\n  \"onehundred_gbe_gmac_reg_core_type\"            => 4\n  \"onehundred_gbe_gmac_reg_tx_almost_full_count\" => 4\n  \"onehundred_gbe_gmac_arp_cache_write_address\"  => 4\n  \"lpmode\"                                       => 4\n  \"sys_scratchpad\"                               => 4\n  \"onehundred_gbe_gmac_arp_cache_read_address\"   => 4\n  \"onehundred_gbe_gmac_reg_mac_address_h\"        => 4\n  \"onehundred_gbe_gmac_reg_tx_packet_rate\"       => 4\n  \"onehundred_gbe_gmac_reg_phy_status_h\"         => 4\n  \"qsfp_rst\"                                     => 4\n  \"onehundred_gbe\"                               => 65536\n  ⋮                                              => ⋮","category":"page"},{"location":"#Reading-and-writing-registers","page":"KATCP.jl Documentation","title":"Reading and writing registers","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"You can use the regread and regwrite function to read/write registers.","category":"page"},{"location":"#KATCP.regread","page":"KATCP.jl Documentation","title":"KATCP.regread","text":"regread(client::Client, name)\n\nRead 32-bit regsiter named name from client.\n\n\n\n\n\n","category":"function"},{"location":"#KATCP.regwrite","page":"KATCP.jl Documentation","title":"KATCP.regwrite","text":"regwrite(client::Client, name, data)\n\nWrites data to 32-bit regsiter named name using client.\n\n\n\n\n\n","category":"function"},{"location":"#Example-3","page":"KATCP.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"julia> regread(client, \"sys_scratchpad\")\n0x00000000\n\njulia> regwrite(client, \"sys_scratchpad\", 12345678)\n\njulia> regread(client, \"sys_scratchpad\")\n0x00bc614e\n\njulia> regwrite(client, \"sys_scratchpad\", 0x12345678)\n\njulia> regread(client, \"sys_scratchpad\")\n0x12345678\n\njulia> regwrite(client, \"sys_scratchpad\", 0)\n\njulia> regread(client, \"sys_scratchpad\")\n0x00000000","category":"page"},{"location":"#Reading-and-writing-memory-devices","page":"KATCP.jl Documentation","title":"Reading and writing memory devices","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"The memory space of Block RAMs and Yellow Blocks can be read from and written to using read and write.  This also works for registers, which are essentially just 4 byte memories.","category":"page"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"info: Info\nAll reads and writes in KATCP.jl must be aligned on 4 byte boundaries. Currently, read only returns UInt32 values.  Some conversion from other Integer types are supported by write, but this is subject to change.  You are stronly encouraged to reinterpret or convert your data as needed if you desire a different numerical type.","category":"page"},{"location":"#Base.read-Tuple{KATCP.Client, Any, Any, Any}","page":"KATCP.jl Documentation","title":"Base.read","text":"Base.read(client::Client, name, offset, length)\nBase.read(client::Client, name; offset=0, length=4)\n\nUse client to read length bytes from device name starting at offset.\n\nBoth offset and length are byte counts and must be a multiple of 4.\n\n\n\n\n\n","category":"method"},{"location":"#Base.write-Tuple{KATCP.Client, Any, AbstractArray{<:UInt32}, Any}","page":"KATCP.jl Documentation","title":"Base.write","text":"Base.write(client::Client, name, data, offset=0)\n\nUse client to write data to device name starting at offset.\n\noffset is a byte counts and must be a multiple of 4.\n\n\n\n\n\n","category":"method"},{"location":"#Example-4","page":"KATCP.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"julia> write(client, \"sys_scratchpad\", 0x11223344)\n\njulia> read(client, \"sys_scratchpad\", 0, 4)\n1-element Vector{UInt32}:\n 0x11223344","category":"page"},{"location":"#Estimate-FPGA-clock-frequency","page":"KATCP.jl Documentation","title":"Estimate FPGA clock frequency","text":"","category":"section"},{"location":"#KATCP.estimate_fpga_clock","page":"KATCP.jl Documentation","title":"KATCP.estimate_fpga_clock","text":"estimate_fpga_clock(client, interval=1) -> Estimated clock frequency in MHz\n\nReturn an estimate of the FPGA clock frequency in MHz.\n\nRead sys_clkcounter twice, sleeping interval seconds between the readings, and compute the FPGA clock frequency.\n\n\n\n\n\n","category":"function"},{"location":"#Example-5","page":"KATCP.jl Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"julia> estimate_fpga_clock(client)\n257.542124","category":"page"},{"location":"#Index","page":"KATCP.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"KATCP.jl Documentation","title":"KATCP.jl Documentation","text":"","category":"page"}]
}
